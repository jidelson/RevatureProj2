<?xml version="1.0" encoding="UTF-8"?> <!-- This is our XML version -->

<!-- This is our DOCTYPE declaration -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
        
  <!-- This file is what we'll use to configure Hibernate! -->
  
  <hibernate-configuration>
  
  	<session-factory>
  	
  	<!-- JDBC --> <!-- So much easier than an entire ConnectionUtil class -->
  	<property name ="hibernate.connection.username">postgres</property>
  	<property name ="hibernate.connection.password">password</property>
  	<property name ="hibernate.connection.url">jdbc:postgresql://localhost:5432/postgres?currentSchema=p2</property>
  	<property name ="hibernate.connection.driver_class">org.postgresql.Driver</property>
  	
  	<!-- Hibernate properties -->
  	<property name ="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
  	<property name ="hibernate.default_schema">p2</property>
  	
  	<!-- Hibernate console output --> <!-- These will just let us see our sql in the console -->
  	<property name ="hibernate.show_sql">true</property>
  	<property name ="hibernate.format_sql">true</property>
  	<!-- DDL -->
  	
  	
  	<property name="hibernate.hbm2ddl.auto">update</property>
  	<!-- Remember, create drops your tables at runtime, update will simply update them -->
  	<!-- Then what's update? Update won't drop your tables. they'll update them with any changes you made  -->
  	
  	
  	<!-- We'll map our classes here.. The database won't recognize them as tables if you don't -->
  	
  	<mapping class ="com.revature.models.Users"/>
  	<mapping class ="com.revature.models.Cards"/>
  	<mapping class ="com.revature.models.Subject"/>
  	<mapping class ="com.revature.models.Status"/>
  	
  	<!-- <mapping class ="com.revature.models.*"/> to get all tables -->
  	
  	</session-factory>
  
  </hibernate-configuration>